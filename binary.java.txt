
import java.util.*;
import java.lang.*;
import java.io.*;

class Node {
    int key, height;
    Node left, right;
 
    Node(int d) {
        key = d;
        height = 1;
        left=null;
        right=null;
    }import java.util.Scanner;
 
 /* Class BTNode */
 class BTNode
 {    
     BTNode left, right;
     int data;
 
     public BTNode()
     {
         left = null;
         right = null;
         data = 0;
     }
     public BTNode(int n)
     {
         left = null;
         right = null;
         data = n;
     }
     public void setLeft(BTNode n)
     {
         left = n;
     }
     public void setRight(BTNode n)
     {
         right = n;
     }
     public BTNode getLeft()
     {
         return left;
     }
     public BTNode getRight()
     {
         return right;
     }
     public void setData(int d)
     {
         data = d;
     }
     public int getData()
     {
         return data;
     }     
 }
 
 /* Class BT */
 class BT
 {
     private BTNode root;
 
     public BT()
     {
         root = null;
     }
     public boolean isEmpty()
     {
         return root == null;
     }
     public void insert(int data)
     {
         root = insert(root, data);
     }
     
     private BTNode insert(BTNode node, int data)
     {
         if (node == null)
             node = new BTNode(data);
         else
         {
             if (node.getRight() == null)
                 node.right = insert(node.right, data);
             else
                 node.left = insert(node.left, data);             
         }
         return node;
     }     
     public int countNodes()
     {
         return countNodes(root);
     }
     private int countNodes(BTNode r)
     {
         if (r == null)
             return 0;
         else
         {
             int l = 1;
             l += countNodes(r.getLeft());
             l += countNodes(r.getRight());
             return l;
         }
     }
     public boolean search(int val)
     {
         return search(root, val);
     }
     private boolean search(BTNode r, int val)
     {
         if (r.getData() == val)
             return true;
         if (r.getLeft() != null)
             if (search(r.getLeft(), val))
                 return true;
         if (r.getRight() != null)
             if (search(r.getRight(), val))
                 return true;
         return false;         
     }
     public void inorder()
     {
         inorder(root);
     }
     private void inorder(BTNode r)
     {
         if (r != null)
         {
             inorder(r.getLeft());
             System.out.print(r.getData() +" ");
             inorder(r.getRight());
         }
     }
     public void preorder()
     {
         preorder(root);
     }
     private void preorder(BTNode r)
     {
         if (r != null)
         {
             System.out.print(r.getData() +" ");
             preorder(r.getLeft());             
             preorder(r.getRight());
         }
     }
     public void postorder()
     {
         postorder(root);
     }
     private void postorder(BTNode r)
     {
         if (r != null)
         {
             postorder(r.getLeft());             
             postorder(r.getRight());
             System.out.print(r.getData() +" ");
         }
     }     
 }
 
 /* Class BinaryTree */
 public class BinaryTree
 {
     public static void main(String[] args)
    {            
        Scanner scan = new Scanner(System.in);
        BT bt = new BT(); 
        System.out.println("Binary Tree Test\n");          
        char ch;        
        do    
        {
            System.out.println("\nBinary Tree Operations\n");
            System.out.println("1. insert ");
            System.out.println("2. search");
            System.out.println("3. count nodes");
            System.out.println("4. check empty");
 
            int choice = scan.nextInt();            
            switch (choice)
            {
            case 1 : 
                System.out.println("Enter integer element to insert");
                bt.insert( scan.nextInt() );                     
                break;                          
            case 2 : 
                System.out.println("Enter integer element to search");
                System.out.println("Search result : "+ bt.search( scan.nextInt() ));
                break;                                          
            case 3 : 
                System.out.println("Nodes = "+ bt.countNodes());
                break;     
            case 4 : 
                System.out.println("Empty status = "+ bt.isEmpty());
                break;            
            default : 
                System.out.println("Wrong Entry \n ");
                break;   
            }
         
            System.out.print("\nPost order : ");
            bt.postorder();
            System.out.print("\nPre order : ");
            bt.preorder();
            System.out.print("\nIn order : ");
            bt.inorder();
 
            System.out.println("\n\nDo you want to continue (Type y or n) \n");
            ch = scan.next().charAt(0);                        
        } while (ch == 'Y'|| ch == 'y');               
    }
 }
}
 
class AVLTree {
 
    Node root;
 
    
    int height(Node N) {
        if (N == null)
            return 0;
 
        return N.height;
    }
 
    
    int max(int a, int b) {
        return (a > b) ? a : b;
    }
 
    
    Node rightRotate(Node y) {
        Node x = y.left;
        Node T2 = x.right;
 
       
        x.right = y;
        y.left = T2;
 
        
        y.height = max(height(y.left), height(y.right)) + 1;
        x.height = max(height(x.left), height(x.right)) + 1;
 
        
        return x;
    }
 
    
    Node leftRotate(Node x) {
        Node y = x.right;
        Node T2 = y.left;
 
        
        y.left = x;
        x.right = T2;
 
        
        x.height = max(height(x.left), height(x.right)) + 1;
        y.height = max(height(y.left), height(y.right)) + 1;
 
        
        return y;
    }
 
    
    int getBalance(Node N) {
        if (N == null)
            return 0;
 
        return height(N.left) - height(N.right);
    }
 
    Node insert(Node node, int key) {
 
        
        if (node == null)
            return (new Node(key));
 
        if (key < node.key)
            node.left = insert(node.left, key);
        else if (key > node.key)
            node.right = insert(node.right, key);
        else 
            return node;
 
       
        node.height = 1 + max(height(node.left),
                              height(node.right));
 
        
        int balance = getBalance(node);
 
        
        if (balance > 1 && key < node.left.key)
            return rightRotate(node);
 
        
        if (balance < -1 && key > node.right.key)
            return leftRotate(node);
 
        
        if (balance > 1 && key > node.left.key) {
            node.left = leftRotate(node.left);
            return rightRotate(node);
        }
 
        
        if (balance < -1 && key < node.right.key) {
            node.right = rightRotate(node.right);
            return leftRotate(node);
        }
 
        
        return node;
    }
	
    Node minValueNode(Node node)
    {
        Node current = node;
 
        while (current.left != null)
           current = current.left;
 
        return current;
    }
 
    Node deleteNode(Node root, int key)
    {
        if (root == null)
            return root;
 
        if (key < root.key)
            root.left = deleteNode(root.left, key);
 
        else if (key > root.key)
            root.right = deleteNode(root.right, key);
 
        else
        {
 
            if ((root.left == null) || (root.right == null))
            {
                Node temp = null;
                if (temp == root.left)
                    temp = root.right;
                else
                    temp = root.left;
 
                if (temp == null)
                {
                    temp = root;
                    root = null;
                }
                else 
                    root = temp; 
            }
            else
            {
 
                Node temp = minValueNode(root.right);
 
                root.key = temp.key;
 
                root.right = deleteNode(root.right, temp.key);
            }
        }
 
        if (root == null)
            return root;
 
        root.height = max(height(root.left), height(root.right)) + 1;
        int balance = getBalance(root);
 
        if (balance > 1 && getBalance(root.left) >= 0)
            return rightRotate(root);
 
        if (balance > 1 && getBalance(root.left) < 0)
        {
            root.left = leftRotate(root.left);
            return rightRotate(root);
        }
 
        if (balance < -1 && getBalance(root.right) <= 0)
            return leftRotate(root);
 
        if (balance < -1 && getBalance(root.right) > 0)
        {
            root.right = rightRotate(root.right);
            return leftRotate(root);
        }
 
        return root;
    }
    void preOrder(Node node) {
        if (node != null) {
            System.out.print(node.key + " ");
            preOrder(node.left);
            preOrder(node.right);
        }
    }
 
    public static void main(String[] args) {
        AVLTree tree = new AVLTree();
 
        Scanner sc=new Scanner(System.in);  
        System.out.println("ENTER THE NUMBER OF NODES");
        int n=sc.nextInt();
        for(int i=0;i<n;i++){
	System.out.println("ENTER A NUMBER");
	int num=sc.nextInt();
	tree.root=tree.insert(tree.root,num);
	
        }
 
        
        System.out.println("Preorder traversal" +
                        " of constructed tree is : ");
        tree.preOrder(tree.root);
        
        System.out.println("ENTER THE NODE VALUE TO BE DELETED");
        int num=sc.nextInt();
        tree.root = tree.deleteNode(tree.root, num);
        
        System.out.println("Preorder traversal" +
                        " of constructed tree is : ");
        tree.preOrder(tree.root);
    }
}